README

Architecture:
Thin client written for each platform.
Server side written in JS with Node.JS.
Communicate with RESTful API and JSON objects

Server app has three parts:
Thin client
API
Learning module

Thin client records an audio file and performs native speech recognition.
Thin client sends that text and a user object to an API endpoint.

The API validates the user and then passes the text to the learning module.
The learning modile processes the text and performs ML.
Then it returns the relevant command object and response text to the API.

The command object and the user object are passed to the API, who sends the command object to the thin client as JSON.

The thin client executes the commands and plays the audio file.

Potential command object structure:
{
    ID: idnumber
    Input:
    {
        Audio: 'audiofilebinary',
        Text: 'commandtext'
    },
    Output:
    [
            {
                ID: 'idnumber'
                CommandName:  'commandname',
                Weight: 'percentagechancecorrect',
                Audio: 'audiofilebinary',
                Text: 'commandtext'
            },
            ...
    ],
    Timestamp: timestamp,
    OS: 'operatingsystem',
}

DB STRUCTURE:
Users:
    id,
    username,
    password,
    os,
    timestamp

Inputs:
    id,
    userID -> Users.id,
    text,
    submitDate,
    previousID,
    nextID,
    isValid

Commands:
    id,
    word,
    correct,
    incorrect,
    action
    
Thoughts: If I want to use kNN, I can use number of times correct as the x axis and the number of times incorrect as the y axis, 
but then I would have to add in an unknown node, which wouldn't have values for either of those.